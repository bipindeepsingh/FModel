load("~/FModels/sample_data.RData")
View(sample_data)
sample_data<-sample_data[c(1,4:84)]
View(sample_data)
load("~/FModels/sample_data.RData")
View(sample_data)
sample_data<-sample_data[c(1,5:84)]
View(sample_data)
sample_data<-as.data.frame(sample_data)
View(sample_data)
View(sample_data)
library(data.table)
sample_data<-as.data.frame(sample_data)
sample_data<-as.data.table(sample_data)
View(sample_data)
sample_data<-as.data.frame(sample_data)
sd_frame<-data.frame()
j<-0
for(i in colnames(sample_data)){
j<-j+1
sd_frame[j,"var"]<-i
sd_frame[j,"sd"]<-sd(sample_datap[,i],na.rm = TRUE)
}
sd_frame<-data.frame()
j<-0
for(i in colnames(sample_data[,-c(1,2)])){
j<-j+1
sd_frame[j,"var"]<-i
sd_frame[j,"sd"]<-sd(sample_data[,i],na.rm = TRUE)
}
install.packages("mosiac")
install.packages("mosaic")
library(mosaic)
dat=fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?output=csv")
dat=fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?gid=2111875438&single=true&output=csv")
fetchGoogle(https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?gid=2111875438&single=true&output=csv)
fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?gid=2111875438&single=true&output=csv")
install.packages("fetch")
library(fetch)
library("fetch")
library(Rcurl)
install.packages("RCurl")
library(Rcurl)
library(Rcurl)
install.packages("RCurl")
library(RCurl)
dat=fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?gid=2111875438&single=true&output=csv")
install.packages("installr")
library(installr)
library(RCurl)
library(mosaic)
data=fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?gid=2111875438&single=true&output=csv")
fetchData(https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?gid=2111875438&single=true&output=csv)
fetchData("https://docs.google.com/spreadsheets/d/e/2PACX-1vR72nrHkOWq_QFcK9ykdg4YMCMj7wVI5yjejL0CWDHxSZ4Tk2E7NQza3nqnKx-gE9BMYyz3SYQNt8ZV/pub?gid=2111875438&single=true&output=csv")
install.packages("devtools")
devtools::install_github("ProjectMOSAIC/fetch")
require("ProjectMOSAIC/fetch")
devtools::install_github("ProjectMOSAIC/fetch")
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("aws.s3", "backports", "bit", "blob", "boot", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "clipr", "curl", "data.table", "DBI", "digest", "fansi", "fastDummies", "forcats", "foreach", "forecast", "fracdiff", "glmnet", "glue", "haven", "hms", "htmlwidgets", "iterators", "jsonlite", "lava", "loo", "maptools", "matrixStats", "mime", "ModelMetrics", "nloptr", "openxlsx", "pbkrtest", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "pROC", "processx", "prodlim", "prophet", "ps", "pscl", "quadprog", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "RcppArmadillo", "RcppEigen", "reticulate", "RJDBC", "RODBC", "RSQLite", "scales", "sp", "SparseM", "SQUAREM", "stringi", "tidyr", "tidyselect", "TTR", "xml2", "xts", "yaml", "zip", "zoo"))
devtools::install_github("ProjectMOSAIC/fetch")
require("ProjectMOSAIC/fetch")
devtools::install_github("ProjectMOSAIC/fetch")
intall.packages("stringi")
install.packages("stringi")
devtools::install_github("ProjectMOSAIC/fetch")
devtools::install_github("ProjectMOSAIC/fetch")
library(data.table)
load("~/FModels/sample_data.RData")
sample_data<-sample_data[c(1,5:84)]
sample_data<-as.data.frame(sample_data)
sd_frame<-data.frame()
j<-0
for(i in colnames(sample_data[,-c(1,2)])){
j<-j+1
sd_frame[j,"var"]<-i
sd_frame[j,"sd"]<-sd(sample_data[,i],na.rm = TRUE)
}
sd_frame<-as.data.table(sd_frame)
sa_frame<-sd_frame[sd==0]
sd_frame<-sd_frame[sd==0]
rm(sa_frame)
sd_frame<-as.data.frame(sd_frame)
for(i in sd_frame[,1]){
print(i)
}
rm_frame<-data.frame()
length(rm_frame)
length(sd_frame)
rm_frame<-data.frame()
j<-length(rm_frame)
for(i in sd_frame[,1]){
j<-j+1
rm_frame[j,'var']<-i
rm_frame[j,'step']<-'sd_null'
sample_data[,i]<-NULL
}
j<-length(rm_frame)
length(rownames(rm_frame))
rm_frame<-data.frame()
length(rownames(rm_frame))
j<-length(rm_frame)
for(i in sd_frame[,1]){
j<-j+1
rm_frame[j,'var']<-i
rm_frame[j,'step']<-'sd_null'
sample_data[,i]<-NULL
}
View(sample_data)
linm<-lm(formula = flag ~.,data =sample_data[,-c(1)])
vif<-data.frame(vif(linm))
library(car)
vif<-data.frame(vif(linm))
alias(linm<-lm(formula = flag ~.,data =sample_data[,-c(1)]))
al<-alias(linm<-lm(formula = flag ~.,data =sample_data[,-c(1)]))
al1<-as.data.frame(al)
View(al)
al$Model
al$Complete
al1<-as.data.frame(al$Complete)
View(al1)
rownames(al1)
rm(linm)
rm(al,al1)
al<-alias(linm<-lm(formula = flag ~.,data =sample_data[,-c(1)]))
al1<-as.data.frame(al$Complete)
j<-length(rownames(rm_frame))
j<-length(rownames(rm_frame))
for(i in rownames(al1)){
j<-j+1
rm_frame[j,'var']<-i
rm_frame[j,'step']<-'alias'
sample_data[,i]<-NULL
}
View(rm_frame)
linm<-lm(formula = flag ~.,data =sample_data[,-c(1)])
vif<-data.frame(vif(linm))
vif$col_name<-rownames(vif)
vif<-as.data.table(vif)
names(vif)<-c("vif","var")
setcolorder(vif,c(2,1))
View(vif)
vif<-vif[order(-vif)]
View(vif)
View(vif)
var<-vif[1,1]
var<-value(vif[1,1])
var<-val(vif[1,1])
vif<-as.data.frame(vif)
var<-(vif[1,1])
s<-sample_data
s[,var]<-NULL
paste0('VIF',vif[1,2])
paste0('VIF:',vif[1,2])
paste0('VIF: ',vif[1,2])
j<-length(rownames(rm_frame))
while (vif[1,2]>=10) {
j<-j+1
var<-vif[1,1]
rm_var[j,'var']<-vif[1,1]
rm_var[j,'step']<-paste0('VIF: ',vif[1,2])
sample_data[,var]<-NULL
linm<-lm(formula = flag ~.,data =sample_data[,-c(1)])
vif<-data.frame(vif(linm))
vif$col_name<-rownames(vif)
vif<-as.data.table(vif)
names(vif)<-c("vif","var")
setcolorder(vif,c(2,1))
vif<-vif[order(-vif)]
vif<-as.data.frame(vif)
}
linm<-lm(formula = flag ~.,data =sample_data[,-c(1)])
vif<-data.frame(vif(linm))
vif$col_name<-rownames(vif)
vif<-as.data.table(vif)
names(vif)<-c("vif","var")
setcolorder(vif,c(2,1))
vif<-vif[order(-vif)]
vif<-as.data.frame(vif)
j<-length(rownames(rm_frame))
while (vif[1,2]>=10) {
j<-j+1
var<-vif[1,1]
rm_frame[j,'var']<-vif[1,1]
rm_frame[j,'step']<-paste0('VIF: ',vif[1,2])
sample_data[,var]<-NULL
linm<-lm(formula = flag ~.,data =sample_data[,-c(1)])
vif<-data.frame(vif(linm))
vif$col_name<-rownames(vif)
vif<-as.data.table(vif)
names(vif)<-c("vif","var")
setcolorder(vif,c(2,1))
vif<-vif[order(-vif)]
vif<-as.data.frame(vif)
}
View(rm_frame)
prop.table(table(sample_data$flag))
set.seed(80085)
index<-sample(1:nrow(sample_data),size = 0.80*nrow(sample_data))
train_base<-sample_data[index,]
test<-sample_data[-index,]
train_p<-train_base[train_base$flag==1]
train_p<-train_base[train_base$flag==1,]
train_f<-train_base[train_base$flag==0,]
a<-prop.table(table(sample_data$flag))
flag_prop<-as.data.frame(prop.table(table(sample_data$flag)))
View(flag_prop)
if(flag_prop$Var1==1 & flag_prop$Freq<0.15){
print("under")
}
if(flag_prop$Freq[flag_prop$Var1==1]<0.15){
print("under")
}
set.seed(80085)
index<-sample(1:nrow(sample_data),size = 0.80*nrow(sample_data))
train_base<-sample_data[index,]
test<-sample_data[-index,]
train<-sample_data[index,]
test<-sample_data[-index,]
rm(train_base)
base.glm<-glm(flag ~.,family=binomial(link='logit'),data=train[,c(-1)])
base_sum<-summary(base.glm)
coeff_base<-data.frame(base_sum$coefficients)
coeff_base$var<-rownames(coeff_base)
coeff_base<-as.data.table(coeff_base)
setcolorder(coeff_base,c(5,1:4))
names(coeff_base)<-c('var','estimate','std_err','z_value','p_val')
coeff_base<-coeff_base[-c(1:1),]
coeff_base<-coeff_base[order(-p_val),]
coeff_base<-as.data.frame(coeff_base)
roc_base<-roc(train$flag,base.glm$fitted.values,plot=FALSE)
library(pROC)
roc_base<-roc(train$flag,base.glm$fitted.values,plot=FALSE)
base.glm<-glm(flag ~.,family=binomial(link='logit'),data=train[,-c(1)])
base_sum<-summary(base.glm)
coeff_base<-data.frame(base_sum$coefficients)
View(coeff_base)
coeff_base$var<-rownames(coeff_base)
coeff_base<-as.data.table(coeff_base)
setcolorder(coeff_base,c(5,1:4))
names(coeff_base)<-c('var','estimate','std_err','z_value','p_val')
coeff_base<-coeff_base[-c(1:1),]
coeff_base<-coeff_base[order(-p_val),]
coeff_base<-as.data.frame(coeff_base)
roc_base<-roc(train$flag,base.glm$fitted.values,plot=FALSE)
j<-length(rownames(rm_frame))
while (coeff_base[1,5]>=0.06) {
j<-j+1
var<-coeff_base[1,1]
train[,var]<-NULL
rm_frame[j,'var']<-coeff[1,1]
rm_frame[j,'step']<-paste0('p_val: ',coeff_base[1,5])
rm(coeff_base)
base.glm <- glm(flag ~.,family=binomial(link='logit'),data=train[,-c(1)])
base_sum<-summary(base.glm)
coeff_base<-data.frame(base_sum$coefficients)
coeff_base$var<-rownames(coeff_base)
coeff_base<-as.data.table(coeff_base)
setcolorder(coeff_base,c(5,1:4))
names(coeff_base)<-c('var','estimate','std_err','z_value','p_val')
coeff_base<-coeff_base[-c(1:1),]
coeff_base<-coeff_base[order(-p_val),]
coeff_base<-as.data.frame(coeff_base)
roc_base<-roc(train$flag,base.glm$fitted.values,plot=FALSE)
}
j<-length(rownames(rm_frame))
while (coeff_base[1,5]>=0.06) {
j<-j+1
var<-coeff_base[1,1]
train[,var]<-NULL
rm_frame[j,'var']<-coeff_base[1,1]
rm_frame[j,'step']<-paste0('p_val: ',coeff_base[1,5])
rm(coeff_base)
base.glm <- glm(flag ~.,family=binomial(link='logit'),data=train[,-c(1)])
base_sum<-summary(base.glm)
coeff_base<-data.frame(base_sum$coefficients)
coeff_base$var<-rownames(coeff_base)
coeff_base<-as.data.table(coeff_base)
setcolorder(coeff_base,c(5,1:4))
names(coeff_base)<-c('var','estimate','std_err','z_value','p_val')
coeff_base<-coeff_base[-c(1:1),]
coeff_base<-coeff_base[order(-p_val),]
coeff_base<-as.data.frame(coeff_base)
roc_base<-roc(train$flag,base.glm$fitted.values,plot=FALSE)
}
train$prob<-base.glm$fitted.values
View(rm_frame)
baseglm_roc<-data.table(recall=roc_baset$sensitivities,specificity=roc_baset$specificities,
threshold=roc_baset$thresholds,auc=roc_baset$auc)
baseglm_roc<-data.table(recall=roc_base$sensitivities,specificity=roc_base$specificities,
threshold=roc_base$thresholds,auc=roc_base$auc)
baseglm_roc$t_select<-baseglm_roc$recall+baseglm_roc$specificity
baseglm_roc2<-baseglm_roc[t_select==max(t_select)]
base_threshold<-baseglm_roc2$threshold
train$class<-ifelse(train$prob>=base_threshold,1,0 )
base_acc_train<-sum(ifelse(train$class==train$flag,1,0))/length(train$trip_id)
base_cf_train<-data.frame(tp=sum(ifelse(train$flag==1 & train$class==1,1,0)),
fp=sum(ifelse(train$flag==0 & train$class==1,1,0)),
tn=sum(ifelse(train$flag==0 & train$class==0,1,0)),
fn=sum(ifelse(train$flag==1 & train$class==0,1,0)))
base_precision_train<-base_cf_train$tp/(base_cf_train$tp+base_cf_train$fp)
base_recall_train<-base_cf_train$tp/(base_cf_train$tp+base_cf_train$fn)
base_specificity_train<-base_cf_train$tn/(base_cf_train$tn+base_cf_train$fp)
test$prob<-predict(base.glm,test,type = 'response')
test$class<-ifelse(test$prob>=base_threshold,1,0 )
base_acc_test<-sum(ifelse(test$class==test$flag,1,0))/length(test$trip_id)
base_cf_test<-data.frame( tp=sum(ifelse(test$flag==1 & test$class==1,1,0)),
fp=sum(ifelse(test$flag==0 & test$class==1,1,0)),
tn=sum(ifelse(test$flag==0 & test$class==0,1,0)),
fn=sum(ifelse(test$flag==1 & test$class==0,1,0)))
base_precision_test<-base_cf_test$tp/(base_cf_test$tp+base_cf_test$fp)
conf_mat_test<-data.frame( tp=sum(ifelse(test$flag==1 & test$class==1,1,0)),
fp=sum(ifelse(test$flag==0 & test$class==1,1,0)),
tn=sum(ifelse(test$flag==0 & test$class==0,1,0)),
fn=sum(ifelse(test$flag==1 & test$class==0,1,0)))
acc_test<-sum(ifelse(test$class==test$flag,1,0))/length(test$trip_id)
acc_train<-sum(ifelse(train$class==train$flag,1,0))/length(train$trip_id)
View(conf_mat_test)
conf_mat_train<-data.frame(data='Train',
tp=sum(ifelse(train$flag==1 & train$class==1,1,0)),
fp=sum(ifelse(train$flag==0 & train$class==1,1,0)),
tn=sum(ifelse(train$flag==0 & train$class==0,1,0)),
fn=sum(ifelse(train$flag==1 & train$class==0,1,0)))
conf_mat_test<-data.frame(data='Test'
tp=sum(ifelse(test$flag==1 & test$class==1,1,0)),
fp=sum(ifelse(test$flag==0 & test$class==1,1,0)),
tn=sum(ifelse(test$flag==0 & test$class==0,1,0)),
fn=sum(ifelse(test$flag==1 & test$class==0,1,0)))
conf_mat_test<-data.frame(data='Test',
tp=sum(ifelse(test$flag==1 & test$class==1,1,0)),
fp=sum(ifelse(test$flag==0 & test$class==1,1,0)),
tn=sum(ifelse(test$flag==0 & test$class==0,1,0)),
fn=sum(ifelse(test$flag==1 & test$class==0,1,0)))
conf_mat<-rbind(conf_mat_train,conf_mat_test)
comp_frame<-data.frame(matrix=c('Acc','precision','recall'))
View(comp_frame)
specificity_train<-conf_mat_train$tn/(conf_mat_train$tn+conf_mat_train$fp)
recall_test<-conf_mat_test$tp/(conf_mat_test$tp+conf_mat_test$fn)
specificity_test<-conf_mat_test$tn/(conf_mat_test$tn+conf_mat_test$fp)
comp_frame<-data.frame(matrix=c('Acc','precision','recall'),
train=c(acc_train,precision_train,recall_train),
test=c(acc_test,precision_test,recall_test))
precision_train<-conf_mat_train$tp/(conf_mat_train$tp+conf_mat_train$fp)
comp_frame<-data.frame(matrix=c('Acc','precision','recall'),
train=c(acc_train,precision_train,recall_train),
test=c(acc_test,precision_test,recall_test))
recall_train<-conf_mat_train$tp/(conf_mat_train$tp+conf_mat_train$fn)
specificity_train<-conf_mat_train$tn/(conf_mat_train$tn+conf_mat_train$fp)
comp_frame<-data.frame(matrix=c('Acc','precision','recall'),
train=c(acc_train,precision_train,recall_train),
test=c(acc_test,precision_test,recall_test))
precision_test<-conf_mat_test$tp/(conf_mat_test$tp+conf_mat_test$fp)
comp_frame<-data.frame(matrix=c('Acc','precision','recall'),
train=c(acc_train,precision_train,recall_train),
test=c(acc_test,precision_test,recall_test))
library(data.table)
library(car)
library(pROC)
load("~/FModels/sample_data.RData")
sample_data<-sample_data[c(1,5:84)]
sample_data<-as.data.frame(sample_data)
#########################SD Check########################
sd_frame<-data.frame()
j<-0
for(i in colnames(sample_data[,-c(1,2)])){
j<-j+1
sd_frame[j,"var"]<-i
sd_frame[j,"sd"]<-sd(sample_data[,i],na.rm = TRUE)
}
sd_frame<-as.data.table(sd_frame)
sd_frame<-sd_frame[sd==0]
sd_frame<-as.data.frame(sd_frame)
rm_frame<-data.frame()
j<-length(rownames(rm_frame))
for(i in sd_frame[,1]){
j<-j+1
rm_frame[j,'var']<-i
rm_frame[j,'step']<-'sd_null'
sample_data[,i]<-NULL
}
####################VIF Check########################
al<-alias(linm<-lm(formula = flag ~.,data =sample_data[,-c(1)]))
al1<-as.data.frame(al$Complete)
j<-length(rownames(rm_frame))
for(i in rownames(al1)){
j<-j+1
rm_frame[j,'var']<-i
rm_frame[j,'step']<-'alias'
sample_data[,i]<-NULL
}
linm<-lm(formula = flag ~.,data =sample_data[,-c(1)])
vif<-data.frame(vif(linm))
vif$col_name<-rownames(vif)
vif<-as.data.table(vif)
names(vif)<-c("vif","var")
setcolorder(vif,c(2,1))
vif<-vif[order(-vif)]
vif<-as.data.frame(vif)
j<-length(rownames(rm_frame))
while (vif[1,2]>=10) {
j<-j+1
var<-vif[1,1]
rm_frame[j,'var']<-vif[1,1]
rm_frame[j,'step']<-paste0('VIF: ',vif[1,2])
sample_data[,var]<-NULL
linm<-lm(formula = flag ~.,data =sample_data[,-c(1)])
vif<-data.frame(vif(linm))
vif$col_name<-rownames(vif)
vif<-as.data.table(vif)
names(vif)<-c("vif","var")
setcolorder(vif,c(2,1))
vif<-vif[order(-vif)]
vif<-as.data.frame(vif)
}
#########################Sampling###########################
set.seed(80085)
index<-sample(1:nrow(sample_data),size = 0.80*nrow(sample_data))
train<-sample_data[index,]
test<-sample_data[-index,]
##############################Logistic Model###########################
base.glm<-glm(flag ~.,family=binomial(link='logit'),data=train[,-c(1)])
base_sum<-summary(base.glm)
coeff_base<-data.frame(base_sum$coefficients)
coeff_base$var<-rownames(coeff_base)
coeff_base<-as.data.table(coeff_base)
setcolorder(coeff_base,c(5,1:4))
names(coeff_base)<-c('var','estimate','std_err','z_value','p_val')
coeff_base<-coeff_base[-c(1:1),]
coeff_base<-coeff_base[order(-p_val),]
coeff_base<-as.data.frame(coeff_base)
roc_base<-roc(train$flag,base.glm$fitted.values,plot=FALSE)
j<-length(rownames(rm_frame))
while (coeff_base[1,5]>=0.06) {
j<-j+1
var<-coeff_base[1,1]
train[,var]<-NULL
rm_frame[j,'var']<-coeff_base[1,1]
rm_frame[j,'step']<-paste0('p_val: ',coeff_base[1,5])
rm(coeff_base)
base.glm <- glm(flag ~.,family=binomial(link='logit'),data=train[,-c(1)])
base_sum<-summary(base.glm)
coeff_base<-data.frame(base_sum$coefficients)
coeff_base$var<-rownames(coeff_base)
coeff_base<-as.data.table(coeff_base)
setcolorder(coeff_base,c(5,1:4))
names(coeff_base)<-c('var','estimate','std_err','z_value','p_val')
coeff_base<-coeff_base[-c(1:1),]
coeff_base<-coeff_base[order(-p_val),]
coeff_base<-as.data.frame(coeff_base)
roc_base<-roc(train$flag,base.glm$fitted.values,plot=FALSE)
}
train$prob<-base.glm$fitted.values
baseglm_roc<-data.table(recall=roc_base$sensitivities,specificity=roc_base$specificities,
threshold=roc_base$thresholds,auc=roc_base$auc)
baseglm_roc$t_select<-baseglm_roc$recall+baseglm_roc$specificity
baseglm_roc2<-baseglm_roc[t_select==max(t_select)]
base_threshold<-baseglm_roc2$threshold
train$class<-ifelse(train$prob>=base_threshold,1,0 )
acc_train<-sum(ifelse(train$class==train$flag,1,0))/length(train$trip_id)
conf_mat_train<-data.frame(data='Train',
tp=sum(ifelse(train$flag==1 & train$class==1,1,0)),
fp=sum(ifelse(train$flag==0 & train$class==1,1,0)),
tn=sum(ifelse(train$flag==0 & train$class==0,1,0)),
fn=sum(ifelse(train$flag==1 & train$class==0,1,0)))
precision_train<-conf_mat_train$tp/(conf_mat_train$tp+conf_mat_train$fp)
recall_train<-conf_mat_train$tp/(conf_mat_train$tp+conf_mat_train$fn)
specificity_train<-conf_mat_train$tn/(conf_mat_train$tn+conf_mat_train$fp)
test$prob<-predict(base.glm,test,type = 'response')
test$class<-ifelse(test$prob>=base_threshold,1,0 )
acc_test<-sum(ifelse(test$class==test$flag,1,0))/length(test$trip_id)
conf_mat_test<-data.frame(data='Test',
tp=sum(ifelse(test$flag==1 & test$class==1,1,0)),
fp=sum(ifelse(test$flag==0 & test$class==1,1,0)),
tn=sum(ifelse(test$flag==0 & test$class==0,1,0)),
fn=sum(ifelse(test$flag==1 & test$class==0,1,0)))
precision_test<-conf_mat_test$tp/(conf_mat_test$tp+conf_mat_test$fp)
recall_test<-conf_mat_test$tp/(conf_mat_test$tp+conf_mat_test$fn)
specificity_test<-conf_mat_test$tn/(conf_mat_test$tn+conf_mat_test$fp)
conf_mat<-rbind(conf_mat_train,conf_mat_test)
comp_frame<-data.frame(matrix=c('Acc','precision','recall'),
train=c(acc_train,precision_train,recall_train),
test=c(acc_test,precision_test,recall_test))
View(sample_data)
install.packages('roxygen')
install.packages('roxygen2')
library(roxygen2)
?head
library(FModels)
library(FModels)
library(FModels)
library(roxygen2)
library(FModels)
library(FModels)
library(FModels)
library(FModels)
library(FModels)
library(FModels)
devtools::document()
library(FModels)
library(FModels)
git init
